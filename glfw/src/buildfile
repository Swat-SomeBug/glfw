# Public headers.
#

pub = [dir_path] ../include/GLFW/

include $pub

pub_hdrs = $($pub/pub_hdrs)
cmn_hdrs = h{internal mappings}
cmn_srcs = context.c init.c \
           input.c monitor.c \
           vulkan.c window.c             

lib{glfw}: $cmn_hdrs $pub_hdrs c{$cmn_srcs}: include = ($cocoa == false)

# Macos
# Using adhoc receipes to compile all sources as objective-C files
# Extensions for files used in variable to allow wildcard filtering
# Otherwise both header and source code is matched
#
cocoa_files = cocoa_*.m nsgl_context.m $cmn_srcs \
              posix_thread.c cocoa_time.c \
              egl_context.c osmesa_context.c
for cocoa_file: $cocoa_files
{
  n = $name($cocoa_file)
  obja{"$n".a.o}: file{"$cocoa_file"}
  {{
     diag objective-c ($<[0])
     $c.path $c.poptions $cc.poptions $c.coptions $cc.coptions\
     -c $path($<[0]) -o $path($>)
  }}
  objs{"$n".dylib.o}: file{"$cocoa_file"}
  {{
     diag objective-c ($<[0])
     $c.path $c.poptions $cc.poptions $c.coptions $cc.coptions\
     -c $path($<[0]) -o $path($>)
  }}

  liba{glfw}: obja{"$n".a.o}: include = $cocoa
  libs{glfw}: objs{"$n".dylib.o}: include = $cocoa
}

lib{glfw}: h{cocoa* nsgl_context osmesa_context\
             egl_context posix_thread}: include = $cocoa

# Windows
lib{glfw}: {h c}{win32* ?gl_context osmesa_context}: include = $win32

# Unix - X11
lib{glfw}: {h c}{x11_* xkb_unicode posix_* linux_joystick \
                 glx_context egl_context osmesa_context}: include = $usex11

# Unix - Wayland
lib{glfw}: {h c}{wl_* xkb_unicode posix_* linux_joystick \
                 egl_context osmesa_context}: include = $usewayland


# Build options.
#
out_pfx_inc = [dir_path] $out_root/include/
src_pfx_inc = [dir_path] $src_root/include/
out_pfx_src = [dir_path] $out_root/src/
src_pfx_src = [dir_path] $src_root/src/

c.poptions =+   "-I$out_pfx_src" "-I$src_pfx_src" \
                "-I$out_pfx_inc" "-I$src_pfx_inc"

# Libs
gl_libs =

# Internal backend selection
if ($win32)
{
  c.poptions += -D_GLFW_WIN32 -D_CRT_SECURE_NO_WARNINGS
  switch $tsys: path.match
  {
    case '*msvc*'
      gl_libs += gdi32.lib
    default
      gl_libs += -lgdi32
  }
}
elif ($cocoa)
{
  switch $c.id: path.match
  {
    case "*clang*"
      c.coptions += -objC
    default
      fail "Only clang supported on macos"
  
  }
  c.poptions += -D_GLFW_COCOA
  gl_libs += -framework Cocoa -framework IOKit -framework CoreFoundation
}
elif ($usewayland)
{
  c.poptions += -D_GLFW_WAYLAND
  gl_libs += -lrt -lm -ldl -lwayland-client -lwayland-cursor -lwayland-egl -lpthread
  # Require to resolve wayland-protocols and wayland-scanner expected to be installed
  import! scanner = wayland-scanner%exe{wayland-scanner}
  import! pkgconfig = pkg-config%exe{pkg-config}
          
  lib{glfw}: {h c}{wayland-xdg-shell-client-protocol \
                   wayland-xdg-decoration-client-protocol \
                   wayland-viewporter-client-protocol \
                   wayland-relative-pointer-unstable-v1-client-protocol \
                   wayland-pointer-constraints-unstable-v1-client-protocol \
                   wayland-idle-inhibit-unstable-v1-client-protocol}
                   
  file{waylandprotocols-path}: $pkgconfig
  {{
      diag pkg-config (waylandprotocols)
      $pkgconfig --variable=pkgdatadir wayland-protocols > $path($>[0])
  }}
  <{h c}{wayland-xdg-shell-client-protocol}>: file{waylandprotocols-path} $scanner
  {{
      diag wayland-scanner (xdg-shell)
      cat $path($<[0]) | set waylandprotocols_root
      $scanner client-header $waylandprotocols_root/stable/xdg-shell/xdg-shell.xml $path($>[0])
      $scanner private-code $waylandprotocols_root/stable/xdg-shell/xdg-shell.xml $path($>[1])
  }}
  <{h c}{wayland-viewporter-client-protocol}>: file{waylandprotocols-path} $scanner
  {{
      diag wayland-scanner (viewporter)
      cat $path($<[0]) | set waylandprotocols_root
      $scanner client-header $waylandprotocols_root/stable/viewporter/viewporter.xml $path($>[0])
      $scanner private-code $waylandprotocols_root/stable/viewporter/viewporter.xml $path($>[1])
  }}
  <{h c}{wayland-xdg-decoration-client-protocol}>: file{waylandprotocols-path} $scanner
  {{
      diag wayland-scanner (xdg-decoration)
      cat $path($<[0]) | set waylandprotocols_root
      $scanner client-header $waylandprotocols_root/unstable/xdg-decoration/xdg-decoration-unstable-v1.xml $path($>[0])
      $scanner private-code $waylandprotocols_root/unstable/xdg-decoration/xdg-decoration-unstable-v1.xml $path($>[1])
  }}
  <{h c}{wayland-relative-pointer-unstable-v1-client-protocol}>: file{waylandprotocols-path} $scanner
  {{
      diag wayland-scanner (relative-pointer)
      cat $path($<[0]) | set waylandprotocols_root
      $scanner client-header $waylandprotocols_root/unstable/relative-pointer/relative-pointer-unstable-v1.xml $path($>[0])
      $scanner private-code $waylandprotocols_root/unstable/relative-pointer/relative-pointer-unstable-v1.xml $path($>[1])
  }}
  <{h c}{wayland-pointer-constraints-unstable-v1-client-protocol}>: file{waylandprotocols-path} $scanner
  {{
      diag wayland-scanner (pointer-constraints)
      cat $path($<[0]) | set waylandprotocols_root
      $scanner client-header $waylandprotocols_root/unstable/pointer-constraints/pointer-constraints-unstable-v1.xml $path($>[0])
      $scanner private-code $waylandprotocols_root/unstable/pointer-constraints/pointer-constraints-unstable-v1.xml $path($>[1])
  }}
  <{h c}{wayland-idle-inhibit-unstable-v1-client-protocol}>: file{waylandprotocols-path} $scanner
  {{
      diag wayland-scanner (idle-inhibit)
      cat $path($<[0]) | set waylandprotocols_root
      $scanner client-header $waylandprotocols_root/unstable/idle-inhibit/idle-inhibit-unstable-v1.xml $path($>[0])
      $scanner private-code $waylandprotocols_root/unstable/idle-inhibit/idle-inhibit-unstable-v1.xml $path($>[1])
  }}
  
}
elif ($usex11)
{
  c.poptions += -D_GLFW_X11
  gl_libs += -lrt -lm -ldl -lX11 -lpthread
}
elif ($useosmesa)
  c.poptions += -D_GLFW_OSMESA

if ($hybridhpg)
  c.poptions += -D_GLFW_USE_HYBRID_HPG

if ($config.glfw.vulkan)
  c.poptions += -D_GLFW_VALKAN_STATIC
  

obja{*}: c.poptions += -DGLFW_STATIC_BUILD
objs{*}: c.poptions += -D_GLFW_BUILD_DLL

# Export options
#
c.libs += $gl_libs
lib{glfw}:
{
  c.export.poptions = "-I$out_pfx_inc" "-I$src_pfx_inc"
  c.export.libs = $intf_libs $gl_libs
}

liba{glfw}: c.export.poptions += -DGLFW_STATIC
libs{glfw}: c.export.poptions += -D_GLFW_BUILD_DLL

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
# Need to do it this way as windows@.. suffix is not yet supported

if $version.pre_release
  lib{glfw}: bin.lib.version = @"-$version.project_id"
else
{
  release_version_suffix = "$version.major.$version.minor"
  if($tcls == 'windows')
    release_version_suffix = "$version.major"
  lib{glfw}: bin.lib.version = @"-$release_version_suffix"
}

# Don't install private headers.
#
h{*}: install = false
